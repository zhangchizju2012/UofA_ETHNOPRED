#include <iostream>
#include <fstream>
#include <sstream>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <cmath>
#include <string.h>
#include <vector>
using namespace std;

bool inTheTreeOrNot(vector<string> treevector, string a){
	for (int i = 0; i <= (treevector.size() - 1); i++){
		if (treevector[i] == a){
			return true;
		}
	}
	return false;
}

template <class Type>
Type stringToNum(const string& str)
{
	istringstream iss(str);
	Type num;
	iss >> num;
	return num;
}

string readCSVFile(const char * fileName){
	std::vector<vector<string> > myvectorinitial;
	myvectorinitial.resize(2);
	std::vector<vector<string> > myvector;
	myvector.resize(2);
	ifstream file;
	stringstream ss;
	string str;
	file.exceptions(ifstream::failbit | ifstream::badbit);
	try {
		file.open(fileName);
		ss << file.rdbuf();
		str = ss.str();
		file.close();
	}
	catch (ifstream::failure e) {
		std::cerr << "Exception opening file\n" << e.what() << endl;
		exit(1);
	}
	//std::cout << str;
	string delimiter = ",";
	string linebreak = "\n";
	string line1;
	string line2;
	string lineID;
	string lineInfo;


	size_t breakPos = str.find(linebreak);
	line1 = str.substr(0, breakPos + linebreak.length());

	return line1;
}

  int main(int argc, char *argv[]) {
    int c;
    char * inputFile = NULL;
    char * output_file = NULL;
    while ((c = getopt (argc, argv, "i:o:")) != -1){
      switch (c)
        {

        case 'i':
      //          fprintf(stderr,"[%s]-> ",optarg);
          if (strcmp (optarg, "(null)") == 0 || optarg[0] == '-'){
              fprintf (stderr,
                 "Found illegal or NULL parameter for the option -i.\n");
              return 1;
          }

          inputFile = optarg;

          break;

        case 'o':
      //          fprintf(stderr,"[%s]-> ",optarg);
          if (strcmp (optarg, "(null)") == 0 || optarg[0] == '-'){
              fprintf (stderr,
                 "Found illegal or NULL parameter for the option -o.\n");
              return 1;
          }

          output_file = optarg;

          break;

      case '?':
        fprintf (stderr, "Unknown option `-%c'.\n", optopt);
        return 1;
      }
    }
    if (inputFile != NULL){
      std::cout << inputFile << std::endl;
    }



	//std::vector<vector<string> > my = readCSVFile(inputFile.c_str());
	std::vector<vector<string> > myvectorinitial;
	myvectorinitial.resize(2);
	std::vector<vector<string> > myvector;
	myvector.resize(2);
	//vector<string> line;
	string delimiter = ",";
	string linebreak = "\n";
	//double count = 0;
	std::vector<size_t>posvector1;
	posvector1.push_back(-1);
	std::vector<size_t>posvector2;
	posvector2.push_back(-1);
	std::string line1 = readCSVFile(inputFile);
	std::string line2 = "34i5,3kjher,356,236,345dg,34563,22d,2356,342,567,\n";
	//African
	std::string treedata = "8,10,11,17,30,36,38,39,57,59,69,72,81,99,100,102,109,125,129,133,144,149,163,189,197,203,208,235,244,257,262,268,274,305,311,321,335,398,441,461,475,482,519,579,582,588,591,617,626,641,644,647,674,677,694,752,764,784,869,879,947,955,976,988,1029,1065,1078,1090,1109,1127,1142,1232,1237,1365,1372,1417,1458,1467,1477,1538,1562,1628,1705,1766,1822,2022,2033,2093,2099,2122,2197,2220,2311,2372,2444,2466,2600,2609,2616,2629,2663,2841,2875,3209,3765,3877,4107,4215,4442,4910,5614,5638,5680,5818,6036,6105,6246,6373,6737,6880,6943,6946,8384,9011,9124,9377,9383,10088,10490,10738,10929,14768,15789,16731,17176,17228,17905,19690,19821,19867,20477,22824,23090,23922,24244,24700,24826,25134,25444,25585,26136,30484,31056,32025,36896,40515,40583,43870,46570,46816,47801,49580,49815,51332,55873,58431,58941,64165,64948,66608,68673,69141,69906,70302,70304,70403,79050,80659,82011,83645,86553,93352,94025,99382,99443,99445,102519,107127,112943,114317,118526,121831,121993,123955,124559,124756,126705,128794,135942,139791,142530,143855,145337,147109,147332,147340,147345,152185,153397,154446,154658,163940,169752,170734,172352,172566,173727,174416,174741,177475,179329,180764,185730,185849,185878,185889,186509,186653,186659,186826,186844,186947,187016,187022,187024,187030,187032,187037,187193,188459,196699,197114,206537,207631,210470,212811,213957,222776,223365,229694,232558,233401,240867,241685,241745,243021,248090,248147,248154,248161,248346,252840,256619,259562,262592,263128,268605,270131,284239,287071,306411,310659,312664,313202,318562,319701,320066,321768,321785,322452,324064,324345,324920,327348,328283,331671,331673,332686,333126,333931,339193,341404,346460,356086,358651,358655,358690,358751,359697,362606,366108,366487,372103,374070,376413,379281,380912,385094,385099,386140,389801,391155,392440,401493,401903,416319,416733,421592,425718,427389,429305,433367,433995,436959,438642,442984,443727,452671,460092,460817,466045,467685,473932,481980,482447,489293,489304,489345,491746,491911,494677,495556,497935,526615,528465,532463,535382,536297,537702,538435,538496,541174,558109,561439,562886,572015,572948,575098,577395,579038,580301,580351,580364,585202,591537,591880,592284,601950,612271,635527,639484,645543,646857,648022,649918,649921,649946,650045,650083,650231,650243,654713,655277,666981,667455,668749,679053,683788,685560,686955,695927,696852,698713,700409,705049,705696,709668,724434,727761,733079,735660,742789,757150,760159,763895,771791,772803,775834,787128,793585,796121,800972,801777,804198,819878,820632,823170,824717,825316,829742,838745,839123,841791,844850,845343,845344,847352,851156,851715,851845,856452,858458,861645,861646,867034,881155,887256,898036,898043,901430,903132,904920,906767,926809,929229,938119,939904,940179,948892,958696,959479,960001,960003,961385,972566,977444,986801,987315,995665,998542,1001178,1003332,1004341,1012711,1017011,1046198,1046654,1047546,1060033,1062820,1068879,1070572,1085987,1089179,1107571,1109550,1109958,1124156,1124321,1125021,1135347,1137250,1138028,1149523,1159093,1159300,1160205,1161856,1162846,1164378,1167574,1167965,1175237,1177682,1180610,1183360,1183534,1188310,1196186,1197476,1200914,1211659,1216418,1222820,1224168,1225207,1225212,1228419,1229642,1233844,1247975,1248919,1260524,1267080,1276562,1281470,1290286,1290938,1291785,1300458,1311448,1312241,1313068,1323304,1335389,1338728,1345183,1349263,1359696,1364391,1366364,1378076,1378091,1380864,1386780,1393333,1397560,1399523,1400408,1400646,1400723,1400789,1404457,1404735,1411005,1412315,1412914,1414174,1414357,1414407,1416076,1419747,1423248,\n";
	//Kenyan
	//std::string treedata = "4,16,17,22,30,32,34,35,38,43,45,49,59,81,82,91,102,117,122,144,163,175,184,199,257,290,295,302,311,336,341,362,380,439,489,506,527,528,583,630,707,715,799,803,845,912,938,967,972,1111,1130,1183,1193,1258,1397,1440,1574,1718,1731,2026,2040,2147,2342,2457,2765,3002,3088,3242,3572,3726,3854,4027,4153,4722,6705,6761,7023,7140,7595,7611,7681,8347,9837,10155,11512,12249,12826,14191,15522,17944,19767,21450,21935,23025,30148,32543,32890,34245,41195,42966,44252,47306,48166,48239,49330,53271,54370,55552,60673,66253,66693,69171,69673,70302,70792,71979,74779,76414,83006,84124,84757,86289,89164,89520,89526,95483,114449,114514,115922,116532,117571,133725,146304,147345,147381,153383,153397,154429,154446,154658,156410,157669,158336,161134,162786,163020,163973,168316,168318,176990,177475,178499,185182,185291,185847,186653,186826,186844,186872,186939,186940,186951,186954,187006,187008,187016,187024,187030,187032,187037,192698,192731,193083,194043,196927,199231,199660,200984,210317,213175,215210,220236,220274,227998,238578,247189,257587,284628,297927,302592,304098,309181,309636,319941,330415,335350,336252,347447,356711,358350,360574,363471,383668,384424,393481,396273,398950,410851,427389,432151,438369,438684,439476,444168,461470,469780,469988,469990,470228,475287,481464,481507,481564,482686,489293,489304,489328,493054,495500,502397,503966,507471,526031,529743,535059,541077,541081,544370,545364,552920,571415,572015,572867,572948,573147,573524,585732,585739,610809,635527,636007,636129,637622,637624,640809,641882,659095,659100,659124,659188,659199,659283,677990,688993,693369,694122,695927,701094,701726,728154,737815,747138,751682,754356,754486,762543,764373,765516,777331,781066,790174,801096,812196,815172,824139,838470,856415,857413,863996,873730,885511,887255,887773,887799,909714,926323,932643,937616,947811,947817,947868,955042,996268,1005999,1008666,1013188,1058451,1062083,1090750,1099458,1107571,1111272,1119864,1135347,1138016,1138028,1140676,1151831,1151955,1172365,1186887,1187365,1217861,1225194,1238546,1243151,1248456,1255959,1268477,1270461,1278790,1290286,1290677,1314081,1319638,1351712,1372082,1375185,1381148,1414139,1423248,\n";
	vector<string> treevector;
	vector<string> idvector;
	vector<double> idnumber;
	std::vector<size_t>postree;
	postree.push_back(-1);
	std::vector<double>dataposvector;
	for (size_t i = 0; i < treedata.length(); ++i)
	{
		if (treedata.at(i) == ','){
			postree.push_back(i);
		}
	}
	postree.push_back(treedata.find(linebreak) - linebreak.length());
	for (double j = 0; j < (postree.size() - 2); j++){
		treevector.push_back(treedata.substr(postree[j] + delimiter.length(), postree[j + 1] - postree[j] - 1));
	}

	for (size_t i = 0; i < line1.length(); ++i)
	{
		if (line1.at(i) == ','){
			posvector1.push_back(i);
		}
	}
	posvector1.push_back(line1.find(linebreak) - linebreak.length());
	for (double j = 0; j < (posvector1.size() - 2); j++){
		idvector.push_back(line1.substr(posvector1[j] + delimiter.length(), posvector1[j + 1] - posvector1[j] - 1));
		//idnumber.push_back(j - 2);
	}

	for (double j = 0; j < treevector.size(); j++){
		long a = stringToNum<long>(treevector[j]);
		cout <<  idvector[a + 4] << endl;
	}

	return 0;
}
